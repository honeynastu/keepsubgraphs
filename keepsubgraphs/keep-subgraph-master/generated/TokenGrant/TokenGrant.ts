// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class StakingContractAuthorized extends ethereum.Event {
  get params(): StakingContractAuthorized__Params {
    return new StakingContractAuthorized__Params(this);
  }
}

export class StakingContractAuthorized__Params {
  _event: StakingContractAuthorized;

  constructor(event: StakingContractAuthorized) {
    this._event = event;
  }

  get grantManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get stakingContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenGrantCreated extends ethereum.Event {
  get params(): TokenGrantCreated__Params {
    return new TokenGrantCreated__Params(this);
  }
}

export class TokenGrantCreated__Params {
  _event: TokenGrantCreated;

  constructor(event: TokenGrantCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TokenGrantRevoked extends ethereum.Event {
  get params(): TokenGrantRevoked__Params {
    return new TokenGrantRevoked__Params(this);
  }
}

export class TokenGrantRevoked__Params {
  _event: TokenGrantRevoked;

  constructor(event: TokenGrantRevoked) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TokenGrantStaked extends ethereum.Event {
  get params(): TokenGrantStaked__Params {
    return new TokenGrantStaked__Params(this);
  }
}

export class TokenGrantStaked__Params {
  _event: TokenGrantStaked;

  constructor(event: TokenGrantStaked) {
    this._event = event;
  }

  get grantId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get operator(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class TokenGrantWithdrawn extends ethereum.Event {
  get params(): TokenGrantWithdrawn__Params {
    return new TokenGrantWithdrawn__Params(this);
  }
}

export class TokenGrantWithdrawn__Params {
  _event: TokenGrantWithdrawn;

  constructor(event: TokenGrantWithdrawn) {
    this._event = event;
  }

  get grantId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TokenGrant__getGrantResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: Address;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    return map;
  }
}

export class TokenGrant__getGrantStakeDetailsResult {
  value0: BigInt;
  value1: BigInt;
  value2: Address;

  constructor(value0: BigInt, value1: BigInt, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }
}

export class TokenGrant__getGrantUnlockingScheduleResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Address;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    return map;
  }
}

export class TokenGrant__grantsResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;
  value11: BigInt;
  value12: Address;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: boolean,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt,
    value11: BigInt,
    value12: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
    this.value12 = value12;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    map.set("value12", ethereum.Value.fromAddress(this.value12));
    return map;
  }
}

export class TokenGrant extends ethereum.SmartContract {
  static bind(address: Address): TokenGrant {
    return new TokenGrant("TokenGrant", address);
  }

  availableToStake(_grantId: BigInt): BigInt {
    let result = super.call(
      "availableToStake",
      "availableToStake(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_grantId)]
    );

    return result[0].toBigInt();
  }

  try_availableToStake(_grantId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "availableToStake",
      "availableToStake(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_grantId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(_owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balances(param0: Address): BigInt {
    let result = super.call("balances", "balances(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balances(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balances", "balances(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getGrant(_id: BigInt): TokenGrant__getGrantResult {
    let result = super.call(
      "getGrant",
      "getGrant(uint256):(uint256,uint256,uint256,uint256,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );

    return new TokenGrant__getGrantResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toAddress()
    );
  }

  try_getGrant(_id: BigInt): ethereum.CallResult<TokenGrant__getGrantResult> {
    let result = super.tryCall(
      "getGrant",
      "getGrant(uint256):(uint256,uint256,uint256,uint256,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TokenGrant__getGrantResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toAddress()
      )
    );
  }

  getGrantStakeDetails(
    operator: Address
  ): TokenGrant__getGrantStakeDetailsResult {
    let result = super.call(
      "getGrantStakeDetails",
      "getGrantStakeDetails(address):(uint256,uint256,address)",
      [ethereum.Value.fromAddress(operator)]
    );

    return new TokenGrant__getGrantStakeDetailsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toAddress()
    );
  }

  try_getGrantStakeDetails(
    operator: Address
  ): ethereum.CallResult<TokenGrant__getGrantStakeDetailsResult> {
    let result = super.tryCall(
      "getGrantStakeDetails",
      "getGrantStakeDetails(address):(uint256,uint256,address)",
      [ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TokenGrant__getGrantStakeDetailsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toAddress()
      )
    );
  }

  getGrantUnlockingSchedule(
    _id: BigInt
  ): TokenGrant__getGrantUnlockingScheduleResult {
    let result = super.call(
      "getGrantUnlockingSchedule",
      "getGrantUnlockingSchedule(uint256):(address,uint256,uint256,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );

    return new TokenGrant__getGrantUnlockingScheduleResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress()
    );
  }

  try_getGrantUnlockingSchedule(
    _id: BigInt
  ): ethereum.CallResult<TokenGrant__getGrantUnlockingScheduleResult> {
    let result = super.tryCall(
      "getGrantUnlockingSchedule",
      "getGrantUnlockingSchedule(uint256):(address,uint256,uint256,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TokenGrant__getGrantUnlockingScheduleResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress()
      )
    );
  }

  getGranteeOperators(grantee: Address): Array<Address> {
    let result = super.call(
      "getGranteeOperators",
      "getGranteeOperators(address):(address[])",
      [ethereum.Value.fromAddress(grantee)]
    );

    return result[0].toAddressArray();
  }

  try_getGranteeOperators(
    grantee: Address
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getGranteeOperators",
      "getGranteeOperators(address):(address[])",
      [ethereum.Value.fromAddress(grantee)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getGrants(_granteeOrGrantManager: Address): Array<BigInt> {
    let result = super.call("getGrants", "getGrants(address):(uint256[])", [
      ethereum.Value.fromAddress(_granteeOrGrantManager)
    ]);

    return result[0].toBigIntArray();
  }

  try_getGrants(
    _granteeOrGrantManager: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("getGrants", "getGrants(address):(uint256[])", [
      ethereum.Value.fromAddress(_granteeOrGrantManager)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  grantIndices(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "grantIndices",
      "grantIndices(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_grantIndices(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "grantIndices",
      "grantIndices(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  grantStakes(param0: Address): Address {
    let result = super.call("grantStakes", "grantStakes(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_grantStakes(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "grantStakes",
      "grantStakes(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  granteesToOperators(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "granteesToOperators",
      "granteesToOperators(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_granteesToOperators(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "granteesToOperators",
      "granteesToOperators(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  grants(param0: BigInt): TokenGrant__grantsResult {
    let result = super.call(
      "grants",
      "grants(uint256):(address,address,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new TokenGrant__grantsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt(),
      result[11].toBigInt(),
      result[12].toAddress()
    );
  }

  try_grants(param0: BigInt): ethereum.CallResult<TokenGrant__grantsResult> {
    let result = super.tryCall(
      "grants",
      "grants(uint256):(address,address,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TokenGrant__grantsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt(),
        value[11].toBigInt(),
        value[12].toAddress()
      )
    );
  }

  numGrants(): BigInt {
    let result = super.call("numGrants", "numGrants():(uint256)", []);

    return result[0].toBigInt();
  }

  try_numGrants(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("numGrants", "numGrants():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeBalanceOf(_address: Address): BigInt {
    let result = super.call(
      "stakeBalanceOf",
      "stakeBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(_address)]
    );

    return result[0].toBigInt();
  }

  try_stakeBalanceOf(_address: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakeBalanceOf",
      "stakeBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  unlockedAmount(_id: BigInt): BigInt {
    let result = super.call(
      "unlockedAmount",
      "unlockedAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );

    return result[0].toBigInt();
  }

  try_unlockedAmount(_id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unlockedAmount",
      "unlockedAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawable(_id: BigInt): BigInt {
    let result = super.call("withdrawable", "withdrawable(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);

    return result[0].toBigInt();
  }

  try_withdrawable(_id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawable",
      "withdrawable(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AuthorizeStakingContractCall extends ethereum.Call {
  get inputs(): AuthorizeStakingContractCall__Inputs {
    return new AuthorizeStakingContractCall__Inputs(this);
  }

  get outputs(): AuthorizeStakingContractCall__Outputs {
    return new AuthorizeStakingContractCall__Outputs(this);
  }
}

export class AuthorizeStakingContractCall__Inputs {
  _call: AuthorizeStakingContractCall;

  constructor(call: AuthorizeStakingContractCall) {
    this._call = call;
  }

  get _stakingContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AuthorizeStakingContractCall__Outputs {
  _call: AuthorizeStakingContractCall;

  constructor(call: AuthorizeStakingContractCall) {
    this._call = call;
  }
}

export class CancelRevokedStakeCall extends ethereum.Call {
  get inputs(): CancelRevokedStakeCall__Inputs {
    return new CancelRevokedStakeCall__Inputs(this);
  }

  get outputs(): CancelRevokedStakeCall__Outputs {
    return new CancelRevokedStakeCall__Outputs(this);
  }
}

export class CancelRevokedStakeCall__Inputs {
  _call: CancelRevokedStakeCall;

  constructor(call: CancelRevokedStakeCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CancelRevokedStakeCall__Outputs {
  _call: CancelRevokedStakeCall;

  constructor(call: CancelRevokedStakeCall) {
    this._call = call;
  }
}

export class CancelStakeCall extends ethereum.Call {
  get inputs(): CancelStakeCall__Inputs {
    return new CancelStakeCall__Inputs(this);
  }

  get outputs(): CancelStakeCall__Outputs {
    return new CancelStakeCall__Outputs(this);
  }
}

export class CancelStakeCall__Inputs {
  _call: CancelStakeCall;

  constructor(call: CancelStakeCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CancelStakeCall__Outputs {
  _call: CancelStakeCall;

  constructor(call: CancelStakeCall) {
    this._call = call;
  }
}

export class ReceiveApprovalCall extends ethereum.Call {
  get inputs(): ReceiveApprovalCall__Inputs {
    return new ReceiveApprovalCall__Inputs(this);
  }

  get outputs(): ReceiveApprovalCall__Outputs {
    return new ReceiveApprovalCall__Outputs(this);
  }
}

export class ReceiveApprovalCall__Inputs {
  _call: ReceiveApprovalCall;

  constructor(call: ReceiveApprovalCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _extraData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ReceiveApprovalCall__Outputs {
  _call: ReceiveApprovalCall;

  constructor(call: ReceiveApprovalCall) {
    this._call = call;
  }
}

export class RecoverStakeCall extends ethereum.Call {
  get inputs(): RecoverStakeCall__Inputs {
    return new RecoverStakeCall__Inputs(this);
  }

  get outputs(): RecoverStakeCall__Outputs {
    return new RecoverStakeCall__Outputs(this);
  }
}

export class RecoverStakeCall__Inputs {
  _call: RecoverStakeCall;

  constructor(call: RecoverStakeCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RecoverStakeCall__Outputs {
  _call: RecoverStakeCall;

  constructor(call: RecoverStakeCall) {
    this._call = call;
  }
}

export class RevokeCall extends ethereum.Call {
  get inputs(): RevokeCall__Inputs {
    return new RevokeCall__Inputs(this);
  }

  get outputs(): RevokeCall__Outputs {
    return new RevokeCall__Outputs(this);
  }
}

export class RevokeCall__Inputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RevokeCall__Outputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _stakingContract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _extraData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class UndelegateCall extends ethereum.Call {
  get inputs(): UndelegateCall__Inputs {
    return new UndelegateCall__Inputs(this);
  }

  get outputs(): UndelegateCall__Outputs {
    return new UndelegateCall__Outputs(this);
  }
}

export class UndelegateCall__Inputs {
  _call: UndelegateCall;

  constructor(call: UndelegateCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UndelegateCall__Outputs {
  _call: UndelegateCall;

  constructor(call: UndelegateCall) {
    this._call = call;
  }
}

export class UndelegateRevokedCall extends ethereum.Call {
  get inputs(): UndelegateRevokedCall__Inputs {
    return new UndelegateRevokedCall__Inputs(this);
  }

  get outputs(): UndelegateRevokedCall__Outputs {
    return new UndelegateRevokedCall__Outputs(this);
  }
}

export class UndelegateRevokedCall__Inputs {
  _call: UndelegateRevokedCall;

  constructor(call: UndelegateRevokedCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UndelegateRevokedCall__Outputs {
  _call: UndelegateRevokedCall;

  constructor(call: UndelegateRevokedCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawRevokedCall extends ethereum.Call {
  get inputs(): WithdrawRevokedCall__Inputs {
    return new WithdrawRevokedCall__Inputs(this);
  }

  get outputs(): WithdrawRevokedCall__Outputs {
    return new WithdrawRevokedCall__Outputs(this);
  }
}

export class WithdrawRevokedCall__Inputs {
  _call: WithdrawRevokedCall;

  constructor(call: WithdrawRevokedCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawRevokedCall__Outputs {
  _call: WithdrawRevokedCall;

  constructor(call: WithdrawRevokedCall) {
    this._call = call;
  }
}
