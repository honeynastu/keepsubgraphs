// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class TBTCDepositToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TBTCDepositToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TBTCDepositToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TBTCDepositToken", id.toString(), this);
  }

  static load(id: string): TBTCDepositToken | null {
    return store.get("TBTCDepositToken", id) as TBTCDepositToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get deposit(): string | null {
    let value = this.get("deposit");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set deposit(value: string | null) {
    if (value === null) {
      this.unset("deposit");
    } else {
      this.set("deposit", Value.fromString(value as string));
    }
  }

  get tokenID(): BigInt {
    let value = this.get("tokenID");
    return value.toBigInt();
  }

  set tokenID(value: BigInt) {
    this.set("tokenID", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get mintedAt(): BigInt {
    let value = this.get("mintedAt");
    return value.toBigInt();
  }

  set mintedAt(value: BigInt) {
    this.set("mintedAt", Value.fromBigInt(value));
  }

  get minter(): Bytes {
    let value = this.get("minter");
    return value.toBytes();
  }

  set minter(value: Bytes) {
    this.set("minter", Value.fromBytes(value));
  }
}

export class StakedropInterval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save StakedropInterval entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save StakedropInterval entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("StakedropInterval", id.toString(), this);
  }

  static load(id: string): StakedropInterval | null {
    return store.get("StakedropInterval", id) as StakedropInterval | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get number(): i32 {
    let value = this.get("number");
    return value.toI32();
  }

  set number(value: i32) {
    this.set("number", Value.fromI32(value));
  }

  get ecdsaIntervalStart(): BigInt {
    let value = this.get("ecdsaIntervalStart");
    return value.toBigInt();
  }

  set ecdsaIntervalStart(value: BigInt) {
    this.set("ecdsaIntervalStart", Value.fromBigInt(value));
  }

  get ecdsaIntervalEnd(): BigInt {
    let value = this.get("ecdsaIntervalEnd");
    return value.toBigInt();
  }

  set ecdsaIntervalEnd(value: BigInt) {
    this.set("ecdsaIntervalEnd", Value.fromBigInt(value));
  }

  get beaconIntervalStart(): BigInt {
    let value = this.get("beaconIntervalStart");
    return value.toBigInt();
  }

  set beaconIntervalStart(value: BigInt) {
    this.set("beaconIntervalStart", Value.fromBigInt(value));
  }

  get beaconIntervalEnd(): BigInt {
    let value = this.get("beaconIntervalEnd");
    return value.toBigInt();
  }

  set beaconIntervalEnd(value: BigInt) {
    this.set("beaconIntervalEnd", Value.fromBigInt(value));
  }

  get keepCount(): i32 {
    let value = this.get("keepCount");
    return value.toI32();
  }

  set keepCount(value: i32) {
    this.set("keepCount", Value.fromI32(value));
  }

  get beaconGroupCount(): i32 {
    let value = this.get("beaconGroupCount");
    return value.toI32();
  }

  set beaconGroupCount(value: i32) {
    this.set("beaconGroupCount", Value.fromI32(value));
  }

  get allocationBeacon(): BigInt | null {
    let value = this.get("allocationBeacon");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set allocationBeacon(value: BigInt | null) {
    if (value === null) {
      this.unset("allocationBeacon");
    } else {
      this.set("allocationBeacon", Value.fromBigInt(value as BigInt));
    }
  }

  get allocationECDSA(): BigInt | null {
    let value = this.get("allocationECDSA");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set allocationECDSA(value: BigInt | null) {
    if (value === null) {
      this.unset("allocationECDSA");
    } else {
      this.set("allocationECDSA", Value.fromBigInt(value as BigInt));
    }
  }

  get keeps(): Array<string> | null {
    let value = this.get("keeps");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set keeps(value: Array<string> | null) {
    if (value === null) {
      this.unset("keeps");
    } else {
      this.set("keeps", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class CreatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CreatedEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CreatedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CreatedEvent", id.toString(), this);
  }

  static load(id: string): CreatedEvent | null {
    return store.get("CreatedEvent", id) as CreatedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get submitter(): Bytes {
    let value = this.get("submitter");
    return value.toBytes();
  }

  set submitter(value: Bytes) {
    this.set("submitter", Value.fromBytes(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get deposit(): string | null {
    let value = this.get("deposit");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set deposit(value: string | null) {
    if (value === null) {
      this.unset("deposit");
    } else {
      this.set("deposit", Value.fromString(value as string));
    }
  }
}

export class FundedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save FundedEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save FundedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("FundedEvent", id.toString(), this);
  }

  static load(id: string): FundedEvent | null {
    return store.get("FundedEvent", id) as FundedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get submitter(): Bytes {
    let value = this.get("submitter");
    return value.toBytes();
  }

  set submitter(value: Bytes) {
    this.set("submitter", Value.fromBytes(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get deposit(): string | null {
    let value = this.get("deposit");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set deposit(value: string | null) {
    if (value === null) {
      this.unset("deposit");
    } else {
      this.set("deposit", Value.fromString(value as string));
    }
  }

  get tx(): Bytes {
    let value = this.get("tx");
    return value.toBytes();
  }

  set tx(value: Bytes) {
    this.set("tx", Value.fromBytes(value));
  }
}

export class RegisteredPubKeyEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save RegisteredPubKeyEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RegisteredPubKeyEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RegisteredPubKeyEvent", id.toString(), this);
  }

  static load(id: string): RegisteredPubKeyEvent | null {
    return store.get(
      "RegisteredPubKeyEvent",
      id
    ) as RegisteredPubKeyEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get submitter(): Bytes {
    let value = this.get("submitter");
    return value.toBytes();
  }

  set submitter(value: Bytes) {
    this.set("submitter", Value.fromBytes(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get deposit(): string | null {
    let value = this.get("deposit");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set deposit(value: string | null) {
    if (value === null) {
      this.unset("deposit");
    } else {
      this.set("deposit", Value.fromString(value as string));
    }
  }

  get signingGroupPubkeyX(): Bytes {
    let value = this.get("signingGroupPubkeyX");
    return value.toBytes();
  }

  set signingGroupPubkeyX(value: Bytes) {
    this.set("signingGroupPubkeyX", Value.fromBytes(value));
  }

  get signingGroupPubkeyY(): Bytes {
    let value = this.get("signingGroupPubkeyY");
    return value.toBytes();
  }

  set signingGroupPubkeyY(value: Bytes) {
    this.set("signingGroupPubkeyY", Value.fromBytes(value));
  }
}

export class RedeemedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RedeemedEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RedeemedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RedeemedEvent", id.toString(), this);
  }

  static load(id: string): RedeemedEvent | null {
    return store.get("RedeemedEvent", id) as RedeemedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get submitter(): Bytes {
    let value = this.get("submitter");
    return value.toBytes();
  }

  set submitter(value: Bytes) {
    this.set("submitter", Value.fromBytes(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get deposit(): string | null {
    let value = this.get("deposit");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set deposit(value: string | null) {
    if (value === null) {
      this.unset("deposit");
    } else {
      this.set("deposit", Value.fromString(value as string));
    }
  }

  get tx(): Bytes {
    let value = this.get("tx");
    return value.toBytes();
  }

  set tx(value: Bytes) {
    this.set("tx", Value.fromBytes(value));
  }
}

export class GotRedemptionSignatureEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save GotRedemptionSignatureEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save GotRedemptionSignatureEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("GotRedemptionSignatureEvent", id.toString(), this);
  }

  static load(id: string): GotRedemptionSignatureEvent | null {
    return store.get(
      "GotRedemptionSignatureEvent",
      id
    ) as GotRedemptionSignatureEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get submitter(): Bytes {
    let value = this.get("submitter");
    return value.toBytes();
  }

  set submitter(value: Bytes) {
    this.set("submitter", Value.fromBytes(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get deposit(): string | null {
    let value = this.get("deposit");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set deposit(value: string | null) {
    if (value === null) {
      this.unset("deposit");
    } else {
      this.set("deposit", Value.fromString(value as string));
    }
  }
}

export class RedemptionRequestedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save RedemptionRequestedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RedemptionRequestedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RedemptionRequestedEvent", id.toString(), this);
  }

  static load(id: string): RedemptionRequestedEvent | null {
    return store.get(
      "RedemptionRequestedEvent",
      id
    ) as RedemptionRequestedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get submitter(): Bytes {
    let value = this.get("submitter");
    return value.toBytes();
  }

  set submitter(value: Bytes) {
    this.set("submitter", Value.fromBytes(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get deposit(): string | null {
    let value = this.get("deposit");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set deposit(value: string | null) {
    if (value === null) {
      this.unset("deposit");
    } else {
      this.set("deposit", Value.fromString(value as string));
    }
  }

  get redeemerOutputScript(): Bytes {
    let value = this.get("redeemerOutputScript");
    return value.toBytes();
  }

  set redeemerOutputScript(value: Bytes) {
    this.set("redeemerOutputScript", Value.fromBytes(value));
  }

  get requestedFee(): BigInt {
    let value = this.get("requestedFee");
    return value.toBigInt();
  }

  set requestedFee(value: BigInt) {
    this.set("requestedFee", Value.fromBigInt(value));
  }

  get utxoValue(): BigInt {
    let value = this.get("utxoValue");
    return value.toBigInt();
  }

  set utxoValue(value: BigInt) {
    this.set("utxoValue", Value.fromBigInt(value));
  }

  get utxoOutpoint(): Bytes {
    let value = this.get("utxoOutpoint");
    return value.toBytes();
  }

  set utxoOutpoint(value: Bytes) {
    this.set("utxoOutpoint", Value.fromBytes(value));
  }

  get redeemer(): Bytes {
    let value = this.get("redeemer");
    return value.toBytes();
  }

  set redeemer(value: Bytes) {
    this.set("redeemer", Value.fromBytes(value));
  }

  get sigHashDigest(): Bytes {
    let value = this.get("sigHashDigest");
    return value.toBytes();
  }

  set sigHashDigest(value: Bytes) {
    this.set("sigHashDigest", Value.fromBytes(value));
  }
}

export class RedemptionFeeIncreasedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save RedemptionFeeIncreasedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RedemptionFeeIncreasedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RedemptionFeeIncreasedEvent", id.toString(), this);
  }

  static load(id: string): RedemptionFeeIncreasedEvent | null {
    return store.get(
      "RedemptionFeeIncreasedEvent",
      id
    ) as RedemptionFeeIncreasedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get submitter(): Bytes {
    let value = this.get("submitter");
    return value.toBytes();
  }

  set submitter(value: Bytes) {
    this.set("submitter", Value.fromBytes(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get deposit(): string | null {
    let value = this.get("deposit");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set deposit(value: string | null) {
    if (value === null) {
      this.unset("deposit");
    } else {
      this.set("deposit", Value.fromString(value as string));
    }
  }

  get redeemerOutputScript(): Bytes {
    let value = this.get("redeemerOutputScript");
    return value.toBytes();
  }

  set redeemerOutputScript(value: Bytes) {
    this.set("redeemerOutputScript", Value.fromBytes(value));
  }

  get requestedFee(): BigInt {
    let value = this.get("requestedFee");
    return value.toBigInt();
  }

  set requestedFee(value: BigInt) {
    this.set("requestedFee", Value.fromBigInt(value));
  }

  get utxoValue(): BigInt {
    let value = this.get("utxoValue");
    return value.toBigInt();
  }

  set utxoValue(value: BigInt) {
    this.set("utxoValue", Value.fromBigInt(value));
  }

  get utxoOutpoint(): Bytes {
    let value = this.get("utxoOutpoint");
    return value.toBytes();
  }

  set utxoOutpoint(value: Bytes) {
    this.set("utxoOutpoint", Value.fromBytes(value));
  }

  get redeemer(): Bytes {
    let value = this.get("redeemer");
    return value.toBytes();
  }

  set redeemer(value: Bytes) {
    this.set("redeemer", Value.fromBytes(value));
  }

  get sigHashDigest(): Bytes {
    let value = this.get("sigHashDigest");
    return value.toBytes();
  }

  set sigHashDigest(value: Bytes) {
    this.set("sigHashDigest", Value.fromBytes(value));
  }
}

export class SetupFailedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SetupFailedEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SetupFailedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SetupFailedEvent", id.toString(), this);
  }

  static load(id: string): SetupFailedEvent | null {
    return store.get("SetupFailedEvent", id) as SetupFailedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get submitter(): Bytes {
    let value = this.get("submitter");
    return value.toBytes();
  }

  set submitter(value: Bytes) {
    this.set("submitter", Value.fromBytes(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get deposit(): string | null {
    let value = this.get("deposit");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set deposit(value: string | null) {
    if (value === null) {
      this.unset("deposit");
    } else {
      this.set("deposit", Value.fromString(value as string));
    }
  }

  get reason(): string | null {
    let value = this.get("reason");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set reason(value: string | null) {
    if (value === null) {
      this.unset("reason");
    } else {
      this.set("reason", Value.fromString(value as string));
    }
  }
}

export class LiquidatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LiquidatedEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiquidatedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiquidatedEvent", id.toString(), this);
  }

  static load(id: string): LiquidatedEvent | null {
    return store.get("LiquidatedEvent", id) as LiquidatedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get submitter(): Bytes {
    let value = this.get("submitter");
    return value.toBytes();
  }

  set submitter(value: Bytes) {
    this.set("submitter", Value.fromBytes(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get deposit(): string | null {
    let value = this.get("deposit");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set deposit(value: string | null) {
    if (value === null) {
      this.unset("deposit");
    } else {
      this.set("deposit", Value.fromString(value as string));
    }
  }
}

export class CourtesyCalledEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CourtesyCalledEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CourtesyCalledEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CourtesyCalledEvent", id.toString(), this);
  }

  static load(id: string): CourtesyCalledEvent | null {
    return store.get("CourtesyCalledEvent", id) as CourtesyCalledEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get submitter(): Bytes {
    let value = this.get("submitter");
    return value.toBytes();
  }

  set submitter(value: Bytes) {
    this.set("submitter", Value.fromBytes(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get deposit(): string | null {
    let value = this.get("deposit");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set deposit(value: string | null) {
    if (value === null) {
      this.unset("deposit");
    } else {
      this.set("deposit", Value.fromString(value as string));
    }
  }
}

export class StartedLiquidationEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save StartedLiquidationEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save StartedLiquidationEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("StartedLiquidationEvent", id.toString(), this);
  }

  static load(id: string): StartedLiquidationEvent | null {
    return store.get(
      "StartedLiquidationEvent",
      id
    ) as StartedLiquidationEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get submitter(): Bytes {
    let value = this.get("submitter");
    return value.toBytes();
  }

  set submitter(value: Bytes) {
    this.set("submitter", Value.fromBytes(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get deposit(): string | null {
    let value = this.get("deposit");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set deposit(value: string | null) {
    if (value === null) {
      this.unset("deposit");
    } else {
      this.set("deposit", Value.fromString(value as string));
    }
  }

  get cause(): string | null {
    let value = this.get("cause");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set cause(value: string | null) {
    if (value === null) {
      this.unset("cause");
    } else {
      this.set("cause", Value.fromString(value as string));
    }
  }
}

export class Deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Deposit entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Deposit entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Deposit", id.toString(), this);
  }

  static load(id: string): Deposit | null {
    return store.get("Deposit", id) as Deposit | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): i32 {
    let value = this.get("index");
    return value.toI32();
  }

  set index(value: i32) {
    this.set("index", Value.fromI32(value));
  }

  get tbtcSystem(): Bytes {
    let value = this.get("tbtcSystem");
    return value.toBytes();
  }

  set tbtcSystem(value: Bytes) {
    this.set("tbtcSystem", Value.fromBytes(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    return value.toBytes();
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get tdtToken(): string {
    let value = this.get("tdtToken");
    return value.toString();
  }

  set tdtToken(value: string) {
    this.set("tdtToken", Value.fromString(value));
  }

  get currentState(): string | null {
    let value = this.get("currentState");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set currentState(value: string | null) {
    if (value === null) {
      this.unset("currentState");
    } else {
      this.set("currentState", Value.fromString(value as string));
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get closedAt(): BigInt | null {
    let value = this.get("closedAt");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set closedAt(value: BigInt | null) {
    if (value === null) {
      this.unset("closedAt");
    } else {
      this.set("closedAt", Value.fromBigInt(value as BigInt));
    }
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    return value.toBigInt();
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get redemptionStartedAt(): BigInt | null {
    let value = this.get("redemptionStartedAt");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set redemptionStartedAt(value: BigInt | null) {
    if (value === null) {
      this.unset("redemptionStartedAt");
    } else {
      this.set("redemptionStartedAt", Value.fromBigInt(value as BigInt));
    }
  }

  get withdrawalRequestTimerStart(): BigInt | null {
    let value = this.get("withdrawalRequestTimerStart");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set withdrawalRequestTimerStart(value: BigInt | null) {
    if (value === null) {
      this.unset("withdrawalRequestTimerStart");
    } else {
      this.set(
        "withdrawalRequestTimerStart",
        Value.fromBigInt(value as BigInt)
      );
    }
  }

  get currentStateTimesOutAt(): BigInt | null {
    let value = this.get("currentStateTimesOutAt");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set currentStateTimesOutAt(value: BigInt | null) {
    if (value === null) {
      this.unset("currentStateTimesOutAt");
    } else {
      this.set("currentStateTimesOutAt", Value.fromBigInt(value as BigInt));
    }
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get failureReason(): string | null {
    let value = this.get("failureReason");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set failureReason(value: string | null) {
    if (value === null) {
      this.unset("failureReason");
    } else {
      this.set("failureReason", Value.fromString(value as string));
    }
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get lastActor(): Bytes {
    let value = this.get("lastActor");
    return value.toBytes();
  }

  set lastActor(value: Bytes) {
    this.set("lastActor", Value.fromBytes(value));
  }

  get keepAddress(): Bytes | null {
    let value = this.get("keepAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set keepAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("keepAddress");
    } else {
      this.set("keepAddress", Value.fromBytes(value as Bytes));
    }
  }

  get lotSizeSatoshis(): BigInt {
    let value = this.get("lotSizeSatoshis");
    return value.toBigInt();
  }

  set lotSizeSatoshis(value: BigInt) {
    this.set("lotSizeSatoshis", Value.fromBigInt(value));
  }

  get initialCollateralizedPercent(): i32 {
    let value = this.get("initialCollateralizedPercent");
    return value.toI32();
  }

  set initialCollateralizedPercent(value: i32) {
    this.set("initialCollateralizedPercent", Value.fromI32(value));
  }

  get undercollateralizedThresholdPercent(): i32 {
    let value = this.get("undercollateralizedThresholdPercent");
    return value.toI32();
  }

  set undercollateralizedThresholdPercent(value: i32) {
    this.set("undercollateralizedThresholdPercent", Value.fromI32(value));
  }

  get severelyUndercollateralizedThresholdPercent(): i32 {
    let value = this.get("severelyUndercollateralizedThresholdPercent");
    return value.toI32();
  }

  set severelyUndercollateralizedThresholdPercent(value: i32) {
    this.set(
      "severelyUndercollateralizedThresholdPercent",
      Value.fromI32(value)
    );
  }

  get signerFee(): BigInt | null {
    let value = this.get("signerFee");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set signerFee(value: BigInt | null) {
    if (value === null) {
      this.unset("signerFee");
    } else {
      this.set("signerFee", Value.fromBigInt(value as BigInt));
    }
  }

  get utxoSize(): BigInt | null {
    let value = this.get("utxoSize");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set utxoSize(value: BigInt | null) {
    if (value === null) {
      this.unset("utxoSize");
    } else {
      this.set("utxoSize", Value.fromBigInt(value as BigInt));
    }
  }

  get endOfTerm(): BigInt | null {
    let value = this.get("endOfTerm");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set endOfTerm(value: BigInt | null) {
    if (value === null) {
      this.unset("endOfTerm");
    } else {
      this.set("endOfTerm", Value.fromBigInt(value as BigInt));
    }
  }

  get bondedECDSAKeep(): string | null {
    let value = this.get("bondedECDSAKeep");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bondedECDSAKeep(value: string | null) {
    if (value === null) {
      this.unset("bondedECDSAKeep");
    } else {
      this.set("bondedECDSAKeep", Value.fromString(value as string));
    }
  }

  get etcToBtcRatio(): BigInt {
    let value = this.get("etcToBtcRatio");
    return value.toBigInt();
  }

  set etcToBtcRatio(value: BigInt) {
    this.set("etcToBtcRatio", Value.fromBigInt(value));
  }

  get depositLiquidation(): string | null {
    let value = this.get("depositLiquidation");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set depositLiquidation(value: string | null) {
    if (value === null) {
      this.unset("depositLiquidation");
    } else {
      this.set("depositLiquidation", Value.fromString(value as string));
    }
  }

  get depositRedemption(): string | null {
    let value = this.get("depositRedemption");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set depositRedemption(value: string | null) {
    if (value === null) {
      this.unset("depositRedemption");
    } else {
      this.set("depositRedemption", Value.fromString(value as string));
    }
  }

  get depositSetup(): string | null {
    let value = this.get("depositSetup");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set depositSetup(value: string | null) {
    if (value === null) {
      this.unset("depositSetup");
    } else {
      this.set("depositSetup", Value.fromString(value as string));
    }
  }

  get filter_liquidationLikeState(): boolean {
    let value = this.get("filter_liquidationLikeState");
    return value.toBoolean();
  }

  set filter_liquidationLikeState(value: boolean) {
    this.set("filter_liquidationLikeState", Value.fromBoolean(value));
  }

  get filter_liquidationLikeOrSignerFailureState(): boolean {
    let value = this.get("filter_liquidationLikeOrSignerFailureState");
    return value.toBoolean();
  }

  set filter_liquidationLikeOrSignerFailureState(value: boolean) {
    this.set(
      "filter_liquidationLikeOrSignerFailureState",
      Value.fromBoolean(value)
    );
  }

  get filter_activeLikeState(): boolean {
    let value = this.get("filter_activeLikeState");
    return value.toBoolean();
  }

  set filter_activeLikeState(value: boolean) {
    this.set("filter_activeLikeState", Value.fromBoolean(value));
  }

  get filter_unmintedTDT(): boolean {
    let value = this.get("filter_unmintedTDT");
    return value.toBoolean();
  }

  set filter_unmintedTDT(value: boolean) {
    this.set("filter_unmintedTDT", Value.fromBoolean(value));
  }

  get filter_redeemableAsOf(): BigInt {
    let value = this.get("filter_redeemableAsOf");
    return value.toBigInt();
  }

  set filter_redeemableAsOf(value: BigInt) {
    this.set("filter_redeemableAsOf", Value.fromBigInt(value));
  }
}

export class DepositSetup extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DepositSetup entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DepositSetup entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DepositSetup", id.toString(), this);
  }

  static load(id: string): DepositSetup | null {
    return store.get("DepositSetup", id) as DepositSetup | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get deposit(): string {
    let value = this.get("deposit");
    return value.toString();
  }

  set deposit(value: string) {
    this.set("deposit", Value.fromString(value));
  }

  get failureReason(): string | null {
    let value = this.get("failureReason");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set failureReason(value: string | null) {
    if (value === null) {
      this.unset("failureReason");
    } else {
      this.set("failureReason", Value.fromString(value as string));
    }
  }

  get fundingProofTimerStartedAt(): BigInt | null {
    let value = this.get("fundingProofTimerStartedAt");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fundingProofTimerStartedAt(value: BigInt | null) {
    if (value === null) {
      this.unset("fundingProofTimerStartedAt");
    } else {
      this.set("fundingProofTimerStartedAt", Value.fromBigInt(value as BigInt));
    }
  }
}

export class DepositLiquidation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DepositLiquidation entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DepositLiquidation entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DepositLiquidation", id.toString(), this);
  }

  static load(id: string): DepositLiquidation | null {
    return store.get("DepositLiquidation", id) as DepositLiquidation | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get deposit(): string {
    let value = this.get("deposit");
    return value.toString();
  }

  set deposit(value: string) {
    this.set("deposit", Value.fromString(value));
  }

  get initiateTxhash(): Bytes | null {
    let value = this.get("initiateTxhash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set initiateTxhash(value: Bytes | null) {
    if (value === null) {
      this.unset("initiateTxhash");
    } else {
      this.set("initiateTxhash", Value.fromBytes(value as Bytes));
    }
  }

  get courtesyCallTxhash(): Bytes | null {
    let value = this.get("courtesyCallTxhash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set courtesyCallTxhash(value: Bytes | null) {
    if (value === null) {
      this.unset("courtesyCallTxhash");
    } else {
      this.set("courtesyCallTxhash", Value.fromBytes(value as Bytes));
    }
  }

  get liquidationInitiated(): BigInt | null {
    let value = this.get("liquidationInitiated");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidationInitiated(value: BigInt | null) {
    if (value === null) {
      this.unset("liquidationInitiated");
    } else {
      this.set("liquidationInitiated", Value.fromBigInt(value as BigInt));
    }
  }

  get courtesyCallInitiated(): BigInt | null {
    let value = this.get("courtesyCallInitiated");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set courtesyCallInitiated(value: BigInt | null) {
    if (value === null) {
      this.unset("courtesyCallInitiated");
    } else {
      this.set("courtesyCallInitiated", Value.fromBigInt(value as BigInt));
    }
  }

  get isLiquidated(): boolean {
    let value = this.get("isLiquidated");
    return value.toBoolean();
  }

  set isLiquidated(value: boolean) {
    this.set("isLiquidated", Value.fromBoolean(value));
  }

  get liquidatedAt(): BigInt | null {
    let value = this.get("liquidatedAt");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidatedAt(value: BigInt | null) {
    if (value === null) {
      this.unset("liquidatedAt");
    } else {
      this.set("liquidatedAt", Value.fromBigInt(value as BigInt));
    }
  }

  get liquidationInitiator(): Bytes | null {
    let value = this.get("liquidationInitiator");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set liquidationInitiator(value: Bytes | null) {
    if (value === null) {
      this.unset("liquidationInitiator");
    } else {
      this.set("liquidationInitiator", Value.fromBytes(value as Bytes));
    }
  }

  get cause(): string | null {
    let value = this.get("cause");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set cause(value: string | null) {
    if (value === null) {
      this.unset("cause");
    } else {
      this.set("cause", Value.fromString(value as string));
    }
  }
}

export class DepositRedemption extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DepositRedemption entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DepositRedemption entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DepositRedemption", id.toString(), this);
  }

  static load(id: string): DepositRedemption | null {
    return store.get("DepositRedemption", id) as DepositRedemption | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get deposit(): string {
    let value = this.get("deposit");
    return value.toString();
  }

  set deposit(value: string) {
    this.set("deposit", Value.fromString(value));
  }

  get redeemerOutputScript(): Bytes | null {
    let value = this.get("redeemerOutputScript");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set redeemerOutputScript(value: Bytes | null) {
    if (value === null) {
      this.unset("redeemerOutputScript");
    } else {
      this.set("redeemerOutputScript", Value.fromBytes(value as Bytes));
    }
  }

  get requestedFee(): BigInt | null {
    let value = this.get("requestedFee");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set requestedFee(value: BigInt | null) {
    if (value === null) {
      this.unset("requestedFee");
    } else {
      this.set("requestedFee", Value.fromBigInt(value as BigInt));
    }
  }

  get latestRedemptionFee(): BigInt | null {
    let value = this.get("latestRedemptionFee");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latestRedemptionFee(value: BigInt | null) {
    if (value === null) {
      this.unset("latestRedemptionFee");
    } else {
      this.set("latestRedemptionFee", Value.fromBigInt(value as BigInt));
    }
  }

  get withdrawalRequestAt(): BigInt | null {
    let value = this.get("withdrawalRequestAt");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set withdrawalRequestAt(value: BigInt | null) {
    if (value === null) {
      this.unset("withdrawalRequestAt");
    } else {
      this.set("withdrawalRequestAt", Value.fromBigInt(value as BigInt));
    }
  }

  get redeemedAt(): BigInt | null {
    let value = this.get("redeemedAt");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set redeemedAt(value: BigInt | null) {
    if (value === null) {
      this.unset("redeemedAt");
    } else {
      this.set("redeemedAt", Value.fromBigInt(value as BigInt));
    }
  }

  get lastRequestedDigest(): Bytes | null {
    let value = this.get("lastRequestedDigest");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lastRequestedDigest(value: Bytes | null) {
    if (value === null) {
      this.unset("lastRequestedDigest");
    } else {
      this.set("lastRequestedDigest", Value.fromBytes(value as Bytes));
    }
  }

  get outpoint(): Bytes | null {
    let value = this.get("outpoint");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set outpoint(value: Bytes | null) {
    if (value === null) {
      this.unset("outpoint");
    } else {
      this.set("outpoint", Value.fromBytes(value as Bytes));
    }
  }

  get utxoSize(): BigInt | null {
    let value = this.get("utxoSize");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set utxoSize(value: BigInt | null) {
    if (value === null) {
      this.unset("utxoSize");
    } else {
      this.set("utxoSize", Value.fromBigInt(value as BigInt));
    }
  }

  get txid(): Bytes | null {
    let value = this.get("txid");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txid(value: Bytes | null) {
    if (value === null) {
      this.unset("txid");
    } else {
      this.set("txid", Value.fromBytes(value as Bytes));
    }
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get numDepositsCreated(): i32 {
    let value = this.get("numDepositsCreated");
    return value.toI32();
  }

  set numDepositsCreated(value: i32) {
    this.set("numDepositsCreated", Value.fromI32(value));
  }

  get numDepositsUnfunded(): i32 {
    let value = this.get("numDepositsUnfunded");
    return value.toI32();
  }

  set numDepositsUnfunded(value: i32) {
    this.set("numDepositsUnfunded", Value.fromI32(value));
  }

  get numDepositsRedeemed(): i32 {
    let value = this.get("numDepositsRedeemed");
    return value.toI32();
  }

  set numDepositsRedeemed(value: i32) {
    this.set("numDepositsRedeemed", Value.fromI32(value));
  }

  get numOwnDepositsRedeemed(): i32 {
    let value = this.get("numOwnDepositsRedeemed");
    return value.toI32();
  }

  set numOwnDepositsRedeemed(value: i32) {
    this.set("numOwnDepositsRedeemed", Value.fromI32(value));
  }
}

export class Operator extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Operator entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Operator entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Operator", id.toString(), this);
  }

  static load(id: string): Operator | null {
    return store.get("Operator", id) as Operator | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get stakedAt(): BigInt {
    let value = this.get("stakedAt");
    return value.toBigInt();
  }

  set stakedAt(value: BigInt) {
    this.set("stakedAt", Value.fromBigInt(value));
  }

  get keeps(): Array<string> | null {
    let value = this.get("keeps");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set keeps(value: Array<string> | null) {
    if (value === null) {
      this.unset("keeps");
    } else {
      this.set("keeps", Value.fromStringArray(value as Array<string>));
    }
  }

  get bonds(): Array<string> {
    let value = this.get("bonds");
    return value.toStringArray();
  }

  set bonds(value: Array<string>) {
    this.set("bonds", Value.fromStringArray(value));
  }

  get locks(): Array<string> {
    let value = this.get("locks");
    return value.toStringArray();
  }

  set locks(value: Array<string>) {
    this.set("locks", Value.fromStringArray(value));
  }

  get beaconGroupMemberships(): Array<string> {
    let value = this.get("beaconGroupMemberships");
    return value.toStringArray();
  }

  set beaconGroupMemberships(value: Array<string>) {
    this.set("beaconGroupMemberships", Value.fromStringArray(value));
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(value as Bytes));
    }
  }

  get beneficiary(): Bytes | null {
    let value = this.get("beneficiary");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set beneficiary(value: Bytes | null) {
    if (value === null) {
      this.unset("beneficiary");
    } else {
      this.set("beneficiary", Value.fromBytes(value as Bytes));
    }
  }

  get authorizer(): Bytes | null {
    let value = this.get("authorizer");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set authorizer(value: Bytes | null) {
    if (value === null) {
      this.unset("authorizer");
    } else {
      this.set("authorizer", Value.fromBytes(value as Bytes));
    }
  }

  get bonded(): BigDecimal {
    let value = this.get("bonded");
    return value.toBigDecimal();
  }

  set bonded(value: BigDecimal) {
    this.set("bonded", Value.fromBigDecimal(value));
  }

  get unboundAvailable(): BigDecimal {
    let value = this.get("unboundAvailable");
    return value.toBigDecimal();
  }

  set unboundAvailable(value: BigDecimal) {
    this.set("unboundAvailable", Value.fromBigDecimal(value));
  }

  get totalKeepCount(): i32 {
    let value = this.get("totalKeepCount");
    return value.toI32();
  }

  set totalKeepCount(value: i32) {
    this.set("totalKeepCount", Value.fromI32(value));
  }

  get activeKeepCount(): i32 {
    let value = this.get("activeKeepCount");
    return value.toI32();
  }

  set activeKeepCount(value: i32) {
    this.set("activeKeepCount", Value.fromI32(value));
  }

  get stakedAmount(): BigDecimal {
    let value = this.get("stakedAmount");
    return value.toBigDecimal();
  }

  set stakedAmount(value: BigDecimal) {
    this.set("stakedAmount", Value.fromBigDecimal(value));
  }

  get totalTBTCRewards(): BigInt {
    let value = this.get("totalTBTCRewards");
    return value.toBigInt();
  }

  set totalTBTCRewards(value: BigInt) {
    this.set("totalTBTCRewards", Value.fromBigInt(value));
  }

  get totalETHRewards(): BigInt {
    let value = this.get("totalETHRewards");
    return value.toBigInt();
  }

  set totalETHRewards(value: BigInt) {
    this.set("totalETHRewards", Value.fromBigInt(value));
  }

  get totalBeaconRewards(): BigInt {
    let value = this.get("totalBeaconRewards");
    return value.toBigInt();
  }

  set totalBeaconRewards(value: BigInt) {
    this.set("totalBeaconRewards", Value.fromBigInt(value));
  }

  get attributableFaultCount(): i32 {
    let value = this.get("attributableFaultCount");
    return value.toI32();
  }

  set attributableFaultCount(value: i32) {
    this.set("attributableFaultCount", Value.fromI32(value));
  }

  get involvedInFaultCount(): i32 {
    let value = this.get("involvedInFaultCount");
    return value.toI32();
  }

  set involvedInFaultCount(value: i32) {
    this.set("involvedInFaultCount", Value.fromI32(value));
  }

  get totalFaultCount(): i32 {
    let value = this.get("totalFaultCount");
    return value.toI32();
  }

  set totalFaultCount(value: i32) {
    this.set("totalFaultCount", Value.fromI32(value));
  }
}

export class Lock extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Lock entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Lock entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Lock", id.toString(), this);
  }

  static load(id: string): Lock | null {
    return store.get("Lock", id) as Lock | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get operator(): string {
    let value = this.get("operator");
    return value.toString();
  }

  set operator(value: string) {
    this.set("operator", Value.fromString(value));
  }

  get until(): BigInt {
    let value = this.get("until");
    return value.toBigInt();
  }

  set until(value: BigInt) {
    this.set("until", Value.fromBigInt(value));
  }
}

export class Bond extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Bond entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Bond entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Bond", id.toString(), this);
  }

  static load(id: string): Bond | null {
    return store.get("Bond", id) as Bond | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get referenceID(): BigInt {
    let value = this.get("referenceID");
    return value.toBigInt();
  }

  set referenceID(value: BigInt) {
    this.set("referenceID", Value.fromBigInt(value));
  }

  get bondedAmount(): BigDecimal {
    let value = this.get("bondedAmount");
    return value.toBigDecimal();
  }

  set bondedAmount(value: BigDecimal) {
    this.set("bondedAmount", Value.fromBigDecimal(value));
  }

  get operator(): string {
    let value = this.get("operator");
    return value.toString();
  }

  set operator(value: string) {
    this.set("operator", Value.fromString(value));
  }

  get holder(): Bytes {
    let value = this.get("holder");
    return value.toBytes();
  }

  set holder(value: Bytes) {
    this.set("holder", Value.fromBytes(value));
  }

  get keep(): string {
    let value = this.get("keep");
    return value.toString();
  }

  set keep(value: string) {
    this.set("keep", Value.fromString(value));
  }
}

export class BondedECDSAKeep extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BondedECDSAKeep entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BondedECDSAKeep entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BondedECDSAKeep", id.toString(), this);
  }

  static load(id: string): BondedECDSAKeep | null {
    return store.get("BondedECDSAKeep", id) as BondedECDSAKeep | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get keepAddress(): Bytes {
    let value = this.get("keepAddress");
    return value.toBytes();
  }

  set keepAddress(value: Bytes) {
    this.set("keepAddress", Value.fromBytes(value));
  }

  get deposit(): string {
    let value = this.get("deposit");
    return value.toString();
  }

  set deposit(value: string) {
    this.set("deposit", Value.fromString(value));
  }

  get totalBondAmount(): BigInt | null {
    let value = this.get("totalBondAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalBondAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("totalBondAmount");
    } else {
      this.set("totalBondAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get publicKey(): Bytes | null {
    let value = this.get("publicKey");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set publicKey(value: Bytes | null) {
    if (value === null) {
      this.unset("publicKey");
    } else {
      this.set("publicKey", Value.fromBytes(value as Bytes));
    }
  }

  get status(): string | null {
    let value = this.get("status");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set status(value: string | null) {
    if (value === null) {
      this.unset("status");
    } else {
      this.set("status", Value.fromString(value as string));
    }
  }

  get honestThreshold(): i32 {
    let value = this.get("honestThreshold");
    return value.toI32();
  }

  set honestThreshold(value: i32) {
    this.set("honestThreshold", Value.fromI32(value));
  }

  get members(): Array<string | null> {
    let value = this.get("members");
    return value.toStringArray();
  }

  set members(value: Array<string | null>) {
    this.set("members", Value.fromStringArray(value));
  }

  get etcToBtcRatio(): BigInt {
    let value = this.get("etcToBtcRatio");
    return value.toBigInt();
  }

  set etcToBtcRatio(value: BigInt) {
    this.set("etcToBtcRatio", Value.fromBigInt(value));
  }

  get stakedropInterval(): string | null {
    let value = this.get("stakedropInterval");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set stakedropInterval(value: string | null) {
    if (value === null) {
      this.unset("stakedropInterval");
    } else {
      this.set("stakedropInterval", Value.fromString(value as string));
    }
  }

  get pubkeySubmissions(): Array<string | null> {
    let value = this.get("pubkeySubmissions");
    return value.toStringArray();
  }

  set pubkeySubmissions(value: Array<string | null>) {
    this.set("pubkeySubmissions", Value.fromStringArray(value));
  }
}

export class GovernanceLogEntry extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save GovernanceLogEntry entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save GovernanceLogEntry entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("GovernanceLogEntry", id.toString(), this);
  }

  static load(id: string): GovernanceLogEntry | null {
    return store.get("GovernanceLogEntry", id) as GovernanceLogEntry | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get submitter(): Bytes {
    let value = this.get("submitter");
    return value.toBytes();
  }

  set submitter(value: Bytes) {
    this.set("submitter", Value.fromBytes(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get isRequest(): boolean {
    let value = this.get("isRequest");
    return value.toBoolean();
  }

  set isRequest(value: boolean) {
    this.set("isRequest", Value.fromBoolean(value));
  }

  get change(): string | null {
    let value = this.get("change");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set change(value: string | null) {
    if (value === null) {
      this.unset("change");
    } else {
      this.set("change", Value.fromString(value as string));
    }
  }
}

export class GovernanceChange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save GovernanceChange entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save GovernanceChange entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("GovernanceChange", id.toString(), this);
  }

  static load(id: string): GovernanceChange | null {
    return store.get("GovernanceChange", id) as GovernanceChange | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get requestedAt(): BigInt {
    let value = this.get("requestedAt");
    return value.toBigInt();
  }

  set requestedAt(value: BigInt) {
    this.set("requestedAt", Value.fromBigInt(value));
  }

  get takesEffectAfter(): BigInt {
    let value = this.get("takesEffectAfter");
    return value.toBigInt();
  }

  set takesEffectAfter(value: BigInt) {
    this.set("takesEffectAfter", Value.fromBigInt(value));
  }

  get requestBlock(): BigInt {
    let value = this.get("requestBlock");
    return value.toBigInt();
  }

  set requestBlock(value: BigInt) {
    this.set("requestBlock", Value.fromBigInt(value));
  }

  get requestTransactionHash(): string {
    let value = this.get("requestTransactionHash");
    return value.toString();
  }

  set requestTransactionHash(value: string) {
    this.set("requestTransactionHash", Value.fromString(value));
  }

  get finalizeBlock(): BigInt | null {
    let value = this.get("finalizeBlock");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set finalizeBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("finalizeBlock");
    } else {
      this.set("finalizeBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get finalizeTransactionHash(): string | null {
    let value = this.get("finalizeTransactionHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set finalizeTransactionHash(value: string | null) {
    if (value === null) {
      this.unset("finalizeTransactionHash");
    } else {
      this.set("finalizeTransactionHash", Value.fromString(value as string));
    }
  }

  get newLotSizes(): Array<BigInt> | null {
    let value = this.get("newLotSizes");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set newLotSizes(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("newLotSizes");
    } else {
      this.set("newLotSizes", Value.fromBigIntArray(value as Array<BigInt>));
    }
  }

  get newSignerFeeDivisor(): i32 {
    let value = this.get("newSignerFeeDivisor");
    return value.toI32();
  }

  set newSignerFeeDivisor(value: i32) {
    this.set("newSignerFeeDivisor", Value.fromI32(value));
  }

  get newFactorySelector(): Bytes | null {
    let value = this.get("newFactorySelector");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set newFactorySelector(value: Bytes | null) {
    if (value === null) {
      this.unset("newFactorySelector");
    } else {
      this.set("newFactorySelector", Value.fromBytes(value as Bytes));
    }
  }

  get newFullyBackedFactory(): Bytes | null {
    let value = this.get("newFullyBackedFactory");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set newFullyBackedFactory(value: Bytes | null) {
    if (value === null) {
      this.unset("newFullyBackedFactory");
    } else {
      this.set("newFullyBackedFactory", Value.fromBytes(value as Bytes));
    }
  }

  get newKeepStakedFactory(): Bytes | null {
    let value = this.get("newKeepStakedFactory");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set newKeepStakedFactory(value: Bytes | null) {
    if (value === null) {
      this.unset("newKeepStakedFactory");
    } else {
      this.set("newKeepStakedFactory", Value.fromBytes(value as Bytes));
    }
  }

  get newPriceFeed(): Bytes | null {
    let value = this.get("newPriceFeed");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set newPriceFeed(value: Bytes | null) {
    if (value === null) {
      this.unset("newPriceFeed");
    } else {
      this.set("newPriceFeed", Value.fromBytes(value as Bytes));
    }
  }

  get newInitialCollateralizedPercent(): i32 {
    let value = this.get("newInitialCollateralizedPercent");
    return value.toI32();
  }

  set newInitialCollateralizedPercent(value: i32) {
    this.set("newInitialCollateralizedPercent", Value.fromI32(value));
  }

  get newSeverelyUndercollateralizedThresholdPercent(): i32 {
    let value = this.get("newSeverelyUndercollateralizedThresholdPercent");
    return value.toI32();
  }

  set newSeverelyUndercollateralizedThresholdPercent(value: i32) {
    this.set(
      "newSeverelyUndercollateralizedThresholdPercent",
      Value.fromI32(value)
    );
  }

  get newUndercollateralizedThresholdPercent(): i32 {
    let value = this.get("newUndercollateralizedThresholdPercent");
    return value.toI32();
  }

  set newUndercollateralizedThresholdPercent(value: i32) {
    this.set("newUndercollateralizedThresholdPercent", Value.fromI32(value));
  }

  get prevLotSizes(): Array<BigInt> | null {
    let value = this.get("prevLotSizes");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set prevLotSizes(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("prevLotSizes");
    } else {
      this.set("prevLotSizes", Value.fromBigIntArray(value as Array<BigInt>));
    }
  }

  get prevSignerFeeDivisor(): i32 {
    let value = this.get("prevSignerFeeDivisor");
    return value.toI32();
  }

  set prevSignerFeeDivisor(value: i32) {
    this.set("prevSignerFeeDivisor", Value.fromI32(value));
  }

  get prevFactorySelector(): Bytes | null {
    let value = this.get("prevFactorySelector");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set prevFactorySelector(value: Bytes | null) {
    if (value === null) {
      this.unset("prevFactorySelector");
    } else {
      this.set("prevFactorySelector", Value.fromBytes(value as Bytes));
    }
  }

  get prevFullyBackedFactory(): Bytes | null {
    let value = this.get("prevFullyBackedFactory");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set prevFullyBackedFactory(value: Bytes | null) {
    if (value === null) {
      this.unset("prevFullyBackedFactory");
    } else {
      this.set("prevFullyBackedFactory", Value.fromBytes(value as Bytes));
    }
  }

  get prevKeepStakedFactory(): Bytes | null {
    let value = this.get("prevKeepStakedFactory");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set prevKeepStakedFactory(value: Bytes | null) {
    if (value === null) {
      this.unset("prevKeepStakedFactory");
    } else {
      this.set("prevKeepStakedFactory", Value.fromBytes(value as Bytes));
    }
  }

  get prevInitialCollateralizedPercent(): i32 {
    let value = this.get("prevInitialCollateralizedPercent");
    return value.toI32();
  }

  set prevInitialCollateralizedPercent(value: i32) {
    this.set("prevInitialCollateralizedPercent", Value.fromI32(value));
  }

  get prevSeverelyUndercollateralizedThresholdPercent(): i32 {
    let value = this.get("prevSeverelyUndercollateralizedThresholdPercent");
    return value.toI32();
  }

  set prevSeverelyUndercollateralizedThresholdPercent(value: i32) {
    this.set(
      "prevSeverelyUndercollateralizedThresholdPercent",
      Value.fromI32(value)
    );
  }

  get prevUndercollateralizedThresholdPercent(): i32 {
    let value = this.get("prevUndercollateralizedThresholdPercent");
    return value.toI32();
  }

  set prevUndercollateralizedThresholdPercent(value: i32) {
    this.set("prevUndercollateralizedThresholdPercent", Value.fromI32(value));
  }
}

export class Governance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Governance entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Governance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Governance", id.toString(), this);
  }

  static load(id: string): Governance | null {
    return store.get("Governance", id) as Governance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get newDepositsAllowed(): boolean {
    let value = this.get("newDepositsAllowed");
    return value.toBoolean();
  }

  set newDepositsAllowed(value: boolean) {
    this.set("newDepositsAllowed", Value.fromBoolean(value));
  }

  get signerFeeDivisor(): i32 {
    let value = this.get("signerFeeDivisor");
    return value.toI32();
  }

  set signerFeeDivisor(value: i32) {
    this.set("signerFeeDivisor", Value.fromI32(value));
  }

  get pendingSignerFeeDivisorChange(): string | null {
    let value = this.get("pendingSignerFeeDivisorChange");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pendingSignerFeeDivisorChange(value: string | null) {
    if (value === null) {
      this.unset("pendingSignerFeeDivisorChange");
    } else {
      this.set(
        "pendingSignerFeeDivisorChange",
        Value.fromString(value as string)
      );
    }
  }

  get lotSizes(): Array<BigInt> {
    let value = this.get("lotSizes");
    return value.toBigIntArray();
  }

  set lotSizes(value: Array<BigInt>) {
    this.set("lotSizes", Value.fromBigIntArray(value));
  }

  get pendingLotSizeChange(): string | null {
    let value = this.get("pendingLotSizeChange");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pendingLotSizeChange(value: string | null) {
    if (value === null) {
      this.unset("pendingLotSizeChange");
    } else {
      this.set("pendingLotSizeChange", Value.fromString(value as string));
    }
  }

  get factorySelector(): Bytes {
    let value = this.get("factorySelector");
    return value.toBytes();
  }

  set factorySelector(value: Bytes) {
    this.set("factorySelector", Value.fromBytes(value));
  }

  get fullyBackedFactory(): Bytes {
    let value = this.get("fullyBackedFactory");
    return value.toBytes();
  }

  set fullyBackedFactory(value: Bytes) {
    this.set("fullyBackedFactory", Value.fromBytes(value));
  }

  get keepStakedFactory(): Bytes {
    let value = this.get("keepStakedFactory");
    return value.toBytes();
  }

  set keepStakedFactory(value: Bytes) {
    this.set("keepStakedFactory", Value.fromBytes(value));
  }

  get pendingFactoriesChange(): string | null {
    let value = this.get("pendingFactoriesChange");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pendingFactoriesChange(value: string | null) {
    if (value === null) {
      this.unset("pendingFactoriesChange");
    } else {
      this.set("pendingFactoriesChange", Value.fromString(value as string));
    }
  }

  get priceFeeds(): Array<Bytes> {
    let value = this.get("priceFeeds");
    return value.toBytesArray();
  }

  set priceFeeds(value: Array<Bytes>) {
    this.set("priceFeeds", Value.fromBytesArray(value));
  }

  get pendingPriceFeedAddition(): string | null {
    let value = this.get("pendingPriceFeedAddition");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pendingPriceFeedAddition(value: string | null) {
    if (value === null) {
      this.unset("pendingPriceFeedAddition");
    } else {
      this.set("pendingPriceFeedAddition", Value.fromString(value as string));
    }
  }

  get initialCollateralizedPercent(): i32 {
    let value = this.get("initialCollateralizedPercent");
    return value.toI32();
  }

  set initialCollateralizedPercent(value: i32) {
    this.set("initialCollateralizedPercent", Value.fromI32(value));
  }

  get severelyUndercollateralizedThresholdPercent(): i32 {
    let value = this.get("severelyUndercollateralizedThresholdPercent");
    return value.toI32();
  }

  set severelyUndercollateralizedThresholdPercent(value: i32) {
    this.set(
      "severelyUndercollateralizedThresholdPercent",
      Value.fromI32(value)
    );
  }

  get undercollateralizedThresholdPercent(): i32 {
    let value = this.get("undercollateralizedThresholdPercent");
    return value.toI32();
  }

  set undercollateralizedThresholdPercent(value: i32) {
    this.set("undercollateralizedThresholdPercent", Value.fromI32(value));
  }

  get pendingCollateralizationThresholdsChange(): string | null {
    let value = this.get("pendingCollateralizationThresholdsChange");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pendingCollateralizationThresholdsChange(value: string | null) {
    if (value === null) {
      this.unset("pendingCollateralizationThresholdsChange");
    } else {
      this.set(
        "pendingCollateralizationThresholdsChange",
        Value.fromString(value as string)
      );
    }
  }
}

export class StatsRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save StatsRecord entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save StatsRecord entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("StatsRecord", id.toString(), this);
  }

  static load(id: string): StatsRecord | null {
    return store.get("StatsRecord", id) as StatsRecord | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get depositCount(): i32 {
    let value = this.get("depositCount");
    return value.toI32();
  }

  set depositCount(value: i32) {
    this.set("depositCount", Value.fromI32(value));
  }

  get availableToBeBonded(): BigDecimal {
    let value = this.get("availableToBeBonded");
    return value.toBigDecimal();
  }

  set availableToBeBonded(value: BigDecimal) {
    this.set("availableToBeBonded", Value.fromBigDecimal(value));
  }

  get totalBonded(): BigDecimal {
    let value = this.get("totalBonded");
    return value.toBigDecimal();
  }

  set totalBonded(value: BigDecimal) {
    this.set("totalBonded", Value.fromBigDecimal(value));
  }

  get totalBondsSeized(): BigDecimal {
    let value = this.get("totalBondsSeized");
    return value.toBigDecimal();
  }

  set totalBondsSeized(value: BigDecimal) {
    this.set("totalBondsSeized", Value.fromBigDecimal(value));
  }

  get btcUnderDeposit(): BigInt {
    let value = this.get("btcUnderDeposit");
    return value.toBigInt();
  }

  set btcUnderDeposit(value: BigInt) {
    this.set("btcUnderDeposit", Value.fromBigInt(value));
  }

  get btcInActiveDeposits(): BigInt {
    let value = this.get("btcInActiveDeposits");
    return value.toBigInt();
  }

  set btcInActiveDeposits(value: BigInt) {
    this.set("btcInActiveDeposits", Value.fromBigInt(value));
  }

  get totalGrantCount(): i32 {
    let value = this.get("totalGrantCount");
    return value.toI32();
  }

  set totalGrantCount(value: i32) {
    this.set("totalGrantCount", Value.fromI32(value));
  }

  get totalGrantIssued(): BigInt {
    let value = this.get("totalGrantIssued");
    return value.toBigInt();
  }

  set totalGrantIssued(value: BigInt) {
    this.set("totalGrantIssued", Value.fromBigInt(value));
  }
}

export class StatusRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save StatusRecord entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save StatusRecord entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("StatusRecord", id.toString(), this);
  }

  static load(id: string): StatusRecord | null {
    return store.get("StatusRecord", id) as StatusRecord | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currentRequestedRelayEntry(): string | null {
    let value = this.get("currentRequestedRelayEntry");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set currentRequestedRelayEntry(value: string | null) {
    if (value === null) {
      this.unset("currentRequestedRelayEntry");
    } else {
      this.set("currentRequestedRelayEntry", Value.fromString(value as string));
    }
  }

  get remainingStakedropBeaconAllocation(): BigInt {
    let value = this.get("remainingStakedropBeaconAllocation");
    return value.toBigInt();
  }

  set remainingStakedropBeaconAllocation(value: BigInt) {
    this.set("remainingStakedropBeaconAllocation", Value.fromBigInt(value));
  }

  get remainingStakedropECDSAAllocation(): BigInt {
    let value = this.get("remainingStakedropECDSAAllocation");
    return value.toBigInt();
  }

  set remainingStakedropECDSAAllocation(value: BigInt) {
    this.set("remainingStakedropECDSAAllocation", Value.fromBigInt(value));
  }
}

export class RandomBeaconGroup extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RandomBeaconGroup entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RandomBeaconGroup entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RandomBeaconGroup", id.toString(), this);
  }

  static load(id: string): RandomBeaconGroup | null {
    return store.get("RandomBeaconGroup", id) as RandomBeaconGroup | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pubKey(): Bytes {
    let value = this.get("pubKey");
    return value.toBytes();
  }

  set pubKey(value: Bytes) {
    this.set("pubKey", Value.fromBytes(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get memberships(): Array<string> {
    let value = this.get("memberships");
    return value.toStringArray();
  }

  set memberships(value: Array<string>) {
    this.set("memberships", Value.fromStringArray(value));
  }

  get size(): i32 {
    let value = this.get("size");
    return value.toI32();
  }

  set size(value: i32) {
    this.set("size", Value.fromI32(value));
  }

  get uniqueMemberCount(): i32 {
    let value = this.get("uniqueMemberCount");
    return value.toI32();
  }

  set uniqueMemberCount(value: i32) {
    this.set("uniqueMemberCount", Value.fromI32(value));
  }

  get rewardPerMember(): BigInt {
    let value = this.get("rewardPerMember");
    return value.toBigInt();
  }

  set rewardPerMember(value: BigInt) {
    this.set("rewardPerMember", Value.fromBigInt(value));
  }

  get relayEntries(): Array<string> {
    let value = this.get("relayEntries");
    return value.toStringArray();
  }

  set relayEntries(value: Array<string>) {
    this.set("relayEntries", Value.fromStringArray(value));
  }
}

export class RelayEntry extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RelayEntry entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RelayEntry entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RelayEntry", id.toString(), this);
  }

  static load(id: string): RelayEntry | null {
    return store.get("RelayEntry", id) as RelayEntry | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get requestedAt(): BigInt {
    let value = this.get("requestedAt");
    return value.toBigInt();
  }

  set requestedAt(value: BigInt) {
    this.set("requestedAt", Value.fromBigInt(value));
  }

  get requestedBy(): Bytes {
    let value = this.get("requestedBy");
    return value.toBytes();
  }

  set requestedBy(value: Bytes) {
    this.set("requestedBy", Value.fromBytes(value));
  }

  get group(): string {
    let value = this.get("group");
    return value.toString();
  }

  set group(value: string) {
    this.set("group", Value.fromString(value));
  }

  get requestId(): BigInt | null {
    let value = this.get("requestId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set requestId(value: BigInt | null) {
    if (value === null) {
      this.unset("requestId");
    } else {
      this.set("requestId", Value.fromBigInt(value as BigInt));
    }
  }

  get value(): BigInt | null {
    let value = this.get("value");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set value(value: BigInt | null) {
    if (value === null) {
      this.unset("value");
    } else {
      this.set("value", Value.fromBigInt(value as BigInt));
    }
  }

  get generatedAt(): BigInt | null {
    let value = this.get("generatedAt");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set generatedAt(value: BigInt | null) {
    if (value === null) {
      this.unset("generatedAt");
    } else {
      this.set("generatedAt", Value.fromBigInt(value as BigInt));
    }
  }

  get rewardPerMember(): BigInt | null {
    let value = this.get("rewardPerMember");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set rewardPerMember(value: BigInt | null) {
    if (value === null) {
      this.unset("rewardPerMember");
    } else {
      this.set("rewardPerMember", Value.fromBigInt(value as BigInt));
    }
  }
}

export class RandomBeaconGroupMembership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save RandomBeaconGroupMembership entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RandomBeaconGroupMembership entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RandomBeaconGroupMembership", id.toString(), this);
  }

  static load(id: string): RandomBeaconGroupMembership | null {
    return store.get(
      "RandomBeaconGroupMembership",
      id
    ) as RandomBeaconGroupMembership | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get group(): string {
    let value = this.get("group");
    return value.toString();
  }

  set group(value: string) {
    this.set("group", Value.fromString(value));
  }

  get operator(): string {
    let value = this.get("operator");
    return value.toString();
  }

  set operator(value: string) {
    this.set("operator", Value.fromString(value));
  }

  get count(): i32 {
    let value = this.get("count");
    return value.toI32();
  }

  set count(value: i32) {
    this.set("count", Value.fromI32(value));
  }

  get reward(): BigInt {
    let value = this.get("reward");
    return value.toBigInt();
  }

  set reward(value: BigInt) {
    this.set("reward", Value.fromBigInt(value));
  }

  get groupCreatedAt(): BigInt {
    let value = this.get("groupCreatedAt");
    return value.toBigInt();
  }

  set groupCreatedAt(value: BigInt) {
    this.set("groupCreatedAt", Value.fromBigInt(value));
  }
}

export class PriceFeed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PriceFeed entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PriceFeed entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PriceFeed", id.toString(), this);
  }

  static load(id: string): PriceFeed | null {
    return store.get("PriceFeed", id) as PriceFeed | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get val(): BigInt {
    let value = this.get("val");
    return value.toBigInt();
  }

  set val(value: BigInt) {
    this.set("val", Value.fromBigInt(value));
  }

  get age(): BigInt {
    let value = this.get("age");
    return value.toBigInt();
  }

  set age(value: BigInt) {
    this.set("age", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Grant extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Grant entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Grant entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Grant", id.toString(), this);
  }

  static load(id: string): Grant | null {
    return store.get("Grant", id) as Grant | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get grantManager(): Bytes {
    let value = this.get("grantManager");
    return value.toBytes();
  }

  set grantManager(value: Bytes) {
    this.set("grantManager", Value.fromBytes(value));
  }

  get grantee(): Bytes {
    let value = this.get("grantee");
    return value.toBytes();
  }

  set grantee(value: Bytes) {
    this.set("grantee", Value.fromBytes(value));
  }

  get revokedAt(): BigInt {
    let value = this.get("revokedAt");
    return value.toBigInt();
  }

  set revokedAt(value: BigInt) {
    this.set("revokedAt", Value.fromBigInt(value));
  }

  get revokedAmount(): BigInt {
    let value = this.get("revokedAmount");
    return value.toBigInt();
  }

  set revokedAmount(value: BigInt) {
    this.set("revokedAmount", Value.fromBigInt(value));
  }

  get revokedWithdrawn(): BigInt {
    let value = this.get("revokedWithdrawn");
    return value.toBigInt();
  }

  set revokedWithdrawn(value: BigInt) {
    this.set("revokedWithdrawn", Value.fromBigInt(value));
  }

  get revocable(): boolean {
    let value = this.get("revocable");
    return value.toBoolean();
  }

  set revocable(value: boolean) {
    this.set("revocable", Value.fromBoolean(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get duration(): BigInt {
    let value = this.get("duration");
    return value.toBigInt();
  }

  set duration(value: BigInt) {
    this.set("duration", Value.fromBigInt(value));
  }

  get start(): BigInt {
    let value = this.get("start");
    return value.toBigInt();
  }

  set start(value: BigInt) {
    this.set("start", Value.fromBigInt(value));
  }

  get cliff(): BigInt {
    let value = this.get("cliff");
    return value.toBigInt();
  }

  set cliff(value: BigInt) {
    this.set("cliff", Value.fromBigInt(value));
  }

  get withdrawn(): BigInt {
    let value = this.get("withdrawn");
    return value.toBigInt();
  }

  set withdrawn(value: BigInt) {
    this.set("withdrawn", Value.fromBigInt(value));
  }

  get staked(): BigInt {
    let value = this.get("staked");
    return value.toBigInt();
  }

  set staked(value: BigInt) {
    this.set("staked", Value.fromBigInt(value));
  }

  get stakingPolicy(): Bytes {
    let value = this.get("stakingPolicy");
    return value.toBytes();
  }

  set stakingPolicy(value: Bytes) {
    this.set("stakingPolicy", Value.fromBytes(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(value as BigInt));
    }
  }
}

export class StakingContractAuthorizedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save StakingContractAuthorizedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save StakingContractAuthorizedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("StakingContractAuthorizedEvent", id.toString(), this);
  }

  static load(id: string): StakingContractAuthorizedEvent | null {
    return store.get(
      "StakingContractAuthorizedEvent",
      id
    ) as StakingContractAuthorizedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get submitter(): Bytes {
    let value = this.get("submitter");
    return value.toBytes();
  }

  set submitter(value: Bytes) {
    this.set("submitter", Value.fromBytes(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get deposit(): string | null {
    let value = this.get("deposit");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set deposit(value: string | null) {
    if (value === null) {
      this.unset("deposit");
    } else {
      this.set("deposit", Value.fromString(value as string));
    }
  }

  get grantManager(): Bytes {
    let value = this.get("grantManager");
    return value.toBytes();
  }

  set grantManager(value: Bytes) {
    this.set("grantManager", Value.fromBytes(value));
  }

  get stakingContract(): Bytes {
    let value = this.get("stakingContract");
    return value.toBytes();
  }

  set stakingContract(value: Bytes) {
    this.set("stakingContract", Value.fromBytes(value));
  }
}

export class TokenGrantCreatedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save TokenGrantCreatedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenGrantCreatedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenGrantCreatedEvent", id.toString(), this);
  }

  static load(id: string): TokenGrantCreatedEvent | null {
    return store.get(
      "TokenGrantCreatedEvent",
      id
    ) as TokenGrantCreatedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get submitter(): Bytes {
    let value = this.get("submitter");
    return value.toBytes();
  }

  set submitter(value: Bytes) {
    this.set("submitter", Value.fromBytes(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get deposit(): string | null {
    let value = this.get("deposit");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set deposit(value: string | null) {
    if (value === null) {
      this.unset("deposit");
    } else {
      this.set("deposit", Value.fromString(value as string));
    }
  }

  get grantID(): BigInt {
    let value = this.get("grantID");
    return value.toBigInt();
  }

  set grantID(value: BigInt) {
    this.set("grantID", Value.fromBigInt(value));
  }
}

export class TokenGrantWithdrawnEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save TokenGrantWithdrawnEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenGrantWithdrawnEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenGrantWithdrawnEvent", id.toString(), this);
  }

  static load(id: string): TokenGrantWithdrawnEvent | null {
    return store.get(
      "TokenGrantWithdrawnEvent",
      id
    ) as TokenGrantWithdrawnEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get submitter(): Bytes {
    let value = this.get("submitter");
    return value.toBytes();
  }

  set submitter(value: Bytes) {
    this.set("submitter", Value.fromBytes(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get deposit(): string | null {
    let value = this.get("deposit");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set deposit(value: string | null) {
    if (value === null) {
      this.unset("deposit");
    } else {
      this.set("deposit", Value.fromString(value as string));
    }
  }

  get grantID(): BigInt {
    let value = this.get("grantID");
    return value.toBigInt();
  }

  set grantID(value: BigInt) {
    this.set("grantID", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class TokenGrantStakedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save TokenGrantStakedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenGrantStakedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenGrantStakedEvent", id.toString(), this);
  }

  static load(id: string): TokenGrantStakedEvent | null {
    return store.get(
      "TokenGrantStakedEvent",
      id
    ) as TokenGrantStakedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get submitter(): Bytes {
    let value = this.get("submitter");
    return value.toBytes();
  }

  set submitter(value: Bytes) {
    this.set("submitter", Value.fromBytes(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get deposit(): string | null {
    let value = this.get("deposit");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set deposit(value: string | null) {
    if (value === null) {
      this.unset("deposit");
    } else {
      this.set("deposit", Value.fromString(value as string));
    }
  }

  get grantID(): BigInt {
    let value = this.get("grantID");
    return value.toBigInt();
  }

  set grantID(value: BigInt) {
    this.set("grantID", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }
}

export class TokenGrantRevokedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save TokenGrantRevokedEvent entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenGrantRevokedEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenGrantRevokedEvent", id.toString(), this);
  }

  static load(id: string): TokenGrantRevokedEvent | null {
    return store.get(
      "TokenGrantRevokedEvent",
      id
    ) as TokenGrantRevokedEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get submitter(): Bytes {
    let value = this.get("submitter");
    return value.toBytes();
  }

  set submitter(value: Bytes) {
    this.set("submitter", Value.fromBytes(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get deposit(): string | null {
    let value = this.get("deposit");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set deposit(value: string | null) {
    if (value === null) {
      this.unset("deposit");
    } else {
      this.set("deposit", Value.fromString(value as string));
    }
  }

  get grantID(): BigInt {
    let value = this.get("grantID");
    return value.toBigInt();
  }

  set grantID(value: BigInt) {
    this.set("grantID", Value.fromBigInt(value));
  }
}
