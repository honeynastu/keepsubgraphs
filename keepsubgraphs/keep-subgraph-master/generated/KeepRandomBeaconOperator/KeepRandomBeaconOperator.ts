// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DkgResultSubmittedEvent extends ethereum.Event {
  get params(): DkgResultSubmittedEvent__Params {
    return new DkgResultSubmittedEvent__Params(this);
  }
}

export class DkgResultSubmittedEvent__Params {
  _event: DkgResultSubmittedEvent;

  constructor(event: DkgResultSubmittedEvent) {
    this._event = event;
  }

  get memberIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get groupPubKey(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get misbehaved(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class GroupMemberRewardsWithdrawn extends ethereum.Event {
  get params(): GroupMemberRewardsWithdrawn__Params {
    return new GroupMemberRewardsWithdrawn__Params(this);
  }
}

export class GroupMemberRewardsWithdrawn__Params {
  _event: GroupMemberRewardsWithdrawn;

  constructor(event: GroupMemberRewardsWithdrawn) {
    this._event = event;
  }

  get beneficiary(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get groupIndex(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class GroupSelectionStarted extends ethereum.Event {
  get params(): GroupSelectionStarted__Params {
    return new GroupSelectionStarted__Params(this);
  }
}

export class GroupSelectionStarted__Params {
  _event: GroupSelectionStarted;

  constructor(event: GroupSelectionStarted) {
    this._event = event;
  }

  get newEntry(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OnGroupRegistered extends ethereum.Event {
  get params(): OnGroupRegistered__Params {
    return new OnGroupRegistered__Params(this);
  }
}

export class OnGroupRegistered__Params {
  _event: OnGroupRegistered;

  constructor(event: OnGroupRegistered) {
    this._event = event;
  }

  get groupPubKey(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class RelayEntryRequested extends ethereum.Event {
  get params(): RelayEntryRequested__Params {
    return new RelayEntryRequested__Params(this);
  }
}

export class RelayEntryRequested__Params {
  _event: RelayEntryRequested;

  constructor(event: RelayEntryRequested) {
    this._event = event;
  }

  get previousEntry(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get groupPublicKey(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class RelayEntrySubmitted extends ethereum.Event {
  get params(): RelayEntrySubmitted__Params {
    return new RelayEntrySubmitted__Params(this);
  }
}

export class RelayEntrySubmitted__Params {
  _event: RelayEntrySubmitted;

  constructor(event: RelayEntrySubmitted) {
    this._event = event;
  }
}

export class RelayEntryTimeoutReported extends ethereum.Event {
  get params(): RelayEntryTimeoutReported__Params {
    return new RelayEntryTimeoutReported__Params(this);
  }
}

export class RelayEntryTimeoutReported__Params {
  _event: RelayEntryTimeoutReported;

  constructor(event: RelayEntryTimeoutReported) {
    this._event = event;
  }

  get groupIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UnauthorizedSigningReported extends ethereum.Event {
  get params(): UnauthorizedSigningReported__Params {
    return new UnauthorizedSigningReported__Params(this);
  }
}

export class UnauthorizedSigningReported__Params {
  _event: UnauthorizedSigningReported;

  constructor(event: UnauthorizedSigningReported) {
    this._event = event;
  }

  get groupIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class KeepRandomBeaconOperator extends ethereum.SmartContract {
  static bind(address: Address): KeepRandomBeaconOperator {
    return new KeepRandomBeaconOperator("KeepRandomBeaconOperator", address);
  }

  currentRequestGroupIndex(): BigInt {
    let result = super.call(
      "currentRequestGroupIndex",
      "currentRequestGroupIndex():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentRequestGroupIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentRequestGroupIndex",
      "currentRequestGroupIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentRequestPreviousEntry(): Bytes {
    let result = super.call(
      "currentRequestPreviousEntry",
      "currentRequestPreviousEntry():(bytes)",
      []
    );

    return result[0].toBytes();
  }

  try_currentRequestPreviousEntry(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "currentRequestPreviousEntry",
      "currentRequestPreviousEntry():(bytes)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  currentRequestStartBlock(): BigInt {
    let result = super.call(
      "currentRequestStartBlock",
      "currentRequestStartBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentRequestStartBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentRequestStartBlock",
      "currentRequestStartBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dkgGasEstimate(): BigInt {
    let result = super.call("dkgGasEstimate", "dkgGasEstimate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_dkgGasEstimate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dkgGasEstimate",
      "dkgGasEstimate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dkgSubmitterReimbursementFee(): BigInt {
    let result = super.call(
      "dkgSubmitterReimbursementFee",
      "dkgSubmitterReimbursementFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_dkgSubmitterReimbursementFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dkgSubmitterReimbursementFee",
      "dkgSubmitterReimbursementFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  entryVerificationFee(): BigInt {
    let result = super.call(
      "entryVerificationFee",
      "entryVerificationFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_entryVerificationFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "entryVerificationFee",
      "entryVerificationFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  entryVerificationGasEstimate(): BigInt {
    let result = super.call(
      "entryVerificationGasEstimate",
      "entryVerificationGasEstimate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_entryVerificationGasEstimate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "entryVerificationGasEstimate",
      "entryVerificationGasEstimate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gasPriceCeiling(): BigInt {
    let result = super.call(
      "gasPriceCeiling",
      "gasPriceCeiling():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_gasPriceCeiling(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "gasPriceCeiling",
      "gasPriceCeiling():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFirstActiveGroupIndex(): BigInt {
    let result = super.call(
      "getFirstActiveGroupIndex",
      "getFirstActiveGroupIndex():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getFirstActiveGroupIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFirstActiveGroupIndex",
      "getFirstActiveGroupIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getGroupMemberRewards(groupPubKey: Bytes): BigInt {
    let result = super.call(
      "getGroupMemberRewards",
      "getGroupMemberRewards(bytes):(uint256)",
      [ethereum.Value.fromBytes(groupPubKey)]
    );

    return result[0].toBigInt();
  }

  try_getGroupMemberRewards(groupPubKey: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getGroupMemberRewards",
      "getGroupMemberRewards(bytes):(uint256)",
      [ethereum.Value.fromBytes(groupPubKey)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getGroupMembers(groupPubKey: Bytes): Array<Address> {
    let result = super.call(
      "getGroupMembers",
      "getGroupMembers(bytes):(address[])",
      [ethereum.Value.fromBytes(groupPubKey)]
    );

    return result[0].toAddressArray();
  }

  try_getGroupMembers(groupPubKey: Bytes): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getGroupMembers",
      "getGroupMembers(bytes):(address[])",
      [ethereum.Value.fromBytes(groupPubKey)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getGroupPublicKey(groupIndex: BigInt): Bytes {
    let result = super.call(
      "getGroupPublicKey",
      "getGroupPublicKey(uint256):(bytes)",
      [ethereum.Value.fromUnsignedBigInt(groupIndex)]
    );

    return result[0].toBytes();
  }

  try_getGroupPublicKey(groupIndex: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getGroupPublicKey",
      "getGroupPublicKey(uint256):(bytes)",
      [ethereum.Value.fromUnsignedBigInt(groupIndex)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getGroupRegistrationTime(groupIndex: BigInt): BigInt {
    let result = super.call(
      "getGroupRegistrationTime",
      "getGroupRegistrationTime(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(groupIndex)]
    );

    return result[0].toBigInt();
  }

  try_getGroupRegistrationTime(
    groupIndex: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getGroupRegistrationTime",
      "getGroupRegistrationTime(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(groupIndex)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNumberOfCreatedGroups(): BigInt {
    let result = super.call(
      "getNumberOfCreatedGroups",
      "getNumberOfCreatedGroups():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getNumberOfCreatedGroups(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumberOfCreatedGroups",
      "getNumberOfCreatedGroups():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  groupCreationFee(): BigInt {
    let result = super.call(
      "groupCreationFee",
      "groupCreationFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_groupCreationFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "groupCreationFee",
      "groupCreationFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  groupMemberBaseReward(): BigInt {
    let result = super.call(
      "groupMemberBaseReward",
      "groupMemberBaseReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_groupMemberBaseReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "groupMemberBaseReward",
      "groupMemberBaseReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  groupProfitFee(): BigInt {
    let result = super.call("groupProfitFee", "groupProfitFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_groupProfitFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "groupProfitFee",
      "groupProfitFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  groupSelectionGasEstimate(): BigInt {
    let result = super.call(
      "groupSelectionGasEstimate",
      "groupSelectionGasEstimate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_groupSelectionGasEstimate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "groupSelectionGasEstimate",
      "groupSelectionGasEstimate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  groupSize(): BigInt {
    let result = super.call("groupSize", "groupSize():(uint256)", []);

    return result[0].toBigInt();
  }

  try_groupSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("groupSize", "groupSize():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  groupThreshold(): BigInt {
    let result = super.call("groupThreshold", "groupThreshold():(uint256)", []);

    return result[0].toBigInt();
  }

  try_groupThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "groupThreshold",
      "groupThreshold():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasMinimumStake(staker: Address): boolean {
    let result = super.call(
      "hasMinimumStake",
      "hasMinimumStake(address):(bool)",
      [ethereum.Value.fromAddress(staker)]
    );

    return result[0].toBoolean();
  }

  try_hasMinimumStake(staker: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasMinimumStake",
      "hasMinimumStake(address):(bool)",
      [ethereum.Value.fromAddress(staker)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasWithdrawnRewards(operator: Address, groupIndex: BigInt): boolean {
    let result = super.call(
      "hasWithdrawnRewards",
      "hasWithdrawnRewards(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromUnsignedBigInt(groupIndex)
      ]
    );

    return result[0].toBoolean();
  }

  try_hasWithdrawnRewards(
    operator: Address,
    groupIndex: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasWithdrawnRewards",
      "hasWithdrawnRewards(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromUnsignedBigInt(groupIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isEntryInProgress(): boolean {
    let result = super.call(
      "isEntryInProgress",
      "isEntryInProgress():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isEntryInProgress(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isEntryInProgress",
      "isEntryInProgress():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isGroupRegistered(groupPubKey: Bytes): boolean {
    let result = super.call(
      "isGroupRegistered",
      "isGroupRegistered(bytes):(bool)",
      [ethereum.Value.fromBytes(groupPubKey)]
    );

    return result[0].toBoolean();
  }

  try_isGroupRegistered(groupPubKey: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isGroupRegistered",
      "isGroupRegistered(bytes):(bool)",
      [ethereum.Value.fromBytes(groupPubKey)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isGroupSelectionPossible(): boolean {
    let result = super.call(
      "isGroupSelectionPossible",
      "isGroupSelectionPossible():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isGroupSelectionPossible(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isGroupSelectionPossible",
      "isGroupSelectionPossible():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isGroupTerminated(groupIndex: BigInt): boolean {
    let result = super.call(
      "isGroupTerminated",
      "isGroupTerminated(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(groupIndex)]
    );

    return result[0].toBoolean();
  }

  try_isGroupTerminated(groupIndex: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isGroupTerminated",
      "isGroupTerminated(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(groupIndex)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isStaleGroup(groupPubKey: Bytes): boolean {
    let result = super.call("isStaleGroup", "isStaleGroup(bytes):(bool)", [
      ethereum.Value.fromBytes(groupPubKey)
    ]);

    return result[0].toBoolean();
  }

  try_isStaleGroup(groupPubKey: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("isStaleGroup", "isStaleGroup(bytes):(bool)", [
      ethereum.Value.fromBytes(groupPubKey)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  numberOfGroups(): BigInt {
    let result = super.call("numberOfGroups", "numberOfGroups():(uint256)", []);

    return result[0].toBigInt();
  }

  try_numberOfGroups(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberOfGroups",
      "numberOfGroups():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  relayEntryTimeout(): BigInt {
    let result = super.call(
      "relayEntryTimeout",
      "relayEntryTimeout():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_relayEntryTimeout(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "relayEntryTimeout",
      "relayEntryTimeout():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  resultPublicationBlockStep(): BigInt {
    let result = super.call(
      "resultPublicationBlockStep",
      "resultPublicationBlockStep():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_resultPublicationBlockStep(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "resultPublicationBlockStep",
      "resultPublicationBlockStep():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  selectedParticipants(): Array<Address> {
    let result = super.call(
      "selectedParticipants",
      "selectedParticipants():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_selectedParticipants(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "selectedParticipants",
      "selectedParticipants():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  submittedTickets(): Array<BigInt> {
    let result = super.call(
      "submittedTickets",
      "submittedTickets():(uint64[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_submittedTickets(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "submittedTickets",
      "submittedTickets():(uint64[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  ticketSubmissionTimeout(): BigInt {
    let result = super.call(
      "ticketSubmissionTimeout",
      "ticketSubmissionTimeout():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ticketSubmissionTimeout(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ticketSubmissionTimeout",
      "ticketSubmissionTimeout():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _serviceContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenStaking(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _keepRegistry(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _gasPriceOracle(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddServiceContractCall extends ethereum.Call {
  get inputs(): AddServiceContractCall__Inputs {
    return new AddServiceContractCall__Inputs(this);
  }

  get outputs(): AddServiceContractCall__Outputs {
    return new AddServiceContractCall__Outputs(this);
  }
}

export class AddServiceContractCall__Inputs {
  _call: AddServiceContractCall;

  constructor(call: AddServiceContractCall) {
    this._call = call;
  }

  get serviceContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddServiceContractCall__Outputs {
  _call: AddServiceContractCall;

  constructor(call: AddServiceContractCall) {
    this._call = call;
  }
}

export class CreateGroupCall extends ethereum.Call {
  get inputs(): CreateGroupCall__Inputs {
    return new CreateGroupCall__Inputs(this);
  }

  get outputs(): CreateGroupCall__Outputs {
    return new CreateGroupCall__Outputs(this);
  }
}

export class CreateGroupCall__Inputs {
  _call: CreateGroupCall;

  constructor(call: CreateGroupCall) {
    this._call = call;
  }

  get _newEntry(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get submitter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CreateGroupCall__Outputs {
  _call: CreateGroupCall;

  constructor(call: CreateGroupCall) {
    this._call = call;
  }
}

export class GenesisCall extends ethereum.Call {
  get inputs(): GenesisCall__Inputs {
    return new GenesisCall__Inputs(this);
  }

  get outputs(): GenesisCall__Outputs {
    return new GenesisCall__Outputs(this);
  }
}

export class GenesisCall__Inputs {
  _call: GenesisCall;

  constructor(call: GenesisCall) {
    this._call = call;
  }
}

export class GenesisCall__Outputs {
  _call: GenesisCall;

  constructor(call: GenesisCall) {
    this._call = call;
  }
}

export class RefreshGasPriceCall extends ethereum.Call {
  get inputs(): RefreshGasPriceCall__Inputs {
    return new RefreshGasPriceCall__Inputs(this);
  }

  get outputs(): RefreshGasPriceCall__Outputs {
    return new RefreshGasPriceCall__Outputs(this);
  }
}

export class RefreshGasPriceCall__Inputs {
  _call: RefreshGasPriceCall;

  constructor(call: RefreshGasPriceCall) {
    this._call = call;
  }
}

export class RefreshGasPriceCall__Outputs {
  _call: RefreshGasPriceCall;

  constructor(call: RefreshGasPriceCall) {
    this._call = call;
  }
}

export class RelayEntryCall extends ethereum.Call {
  get inputs(): RelayEntryCall__Inputs {
    return new RelayEntryCall__Inputs(this);
  }

  get outputs(): RelayEntryCall__Outputs {
    return new RelayEntryCall__Outputs(this);
  }
}

export class RelayEntryCall__Inputs {
  _call: RelayEntryCall;

  constructor(call: RelayEntryCall) {
    this._call = call;
  }

  get _groupSignature(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class RelayEntryCall__Outputs {
  _call: RelayEntryCall;

  constructor(call: RelayEntryCall) {
    this._call = call;
  }
}

export class ReportRelayEntryTimeoutCall extends ethereum.Call {
  get inputs(): ReportRelayEntryTimeoutCall__Inputs {
    return new ReportRelayEntryTimeoutCall__Inputs(this);
  }

  get outputs(): ReportRelayEntryTimeoutCall__Outputs {
    return new ReportRelayEntryTimeoutCall__Outputs(this);
  }
}

export class ReportRelayEntryTimeoutCall__Inputs {
  _call: ReportRelayEntryTimeoutCall;

  constructor(call: ReportRelayEntryTimeoutCall) {
    this._call = call;
  }
}

export class ReportRelayEntryTimeoutCall__Outputs {
  _call: ReportRelayEntryTimeoutCall;

  constructor(call: ReportRelayEntryTimeoutCall) {
    this._call = call;
  }
}

export class ReportUnauthorizedSigningCall extends ethereum.Call {
  get inputs(): ReportUnauthorizedSigningCall__Inputs {
    return new ReportUnauthorizedSigningCall__Inputs(this);
  }

  get outputs(): ReportUnauthorizedSigningCall__Outputs {
    return new ReportUnauthorizedSigningCall__Outputs(this);
  }
}

export class ReportUnauthorizedSigningCall__Inputs {
  _call: ReportUnauthorizedSigningCall;

  constructor(call: ReportUnauthorizedSigningCall) {
    this._call = call;
  }

  get groupIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get signedMsgSender(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ReportUnauthorizedSigningCall__Outputs {
  _call: ReportUnauthorizedSigningCall;

  constructor(call: ReportUnauthorizedSigningCall) {
    this._call = call;
  }
}

export class SignCall extends ethereum.Call {
  get inputs(): SignCall__Inputs {
    return new SignCall__Inputs(this);
  }

  get outputs(): SignCall__Outputs {
    return new SignCall__Outputs(this);
  }
}

export class SignCall__Inputs {
  _call: SignCall;

  constructor(call: SignCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get previousEntry(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SignCall__Outputs {
  _call: SignCall;

  constructor(call: SignCall) {
    this._call = call;
  }
}

export class SubmitDkgResultCall extends ethereum.Call {
  get inputs(): SubmitDkgResultCall__Inputs {
    return new SubmitDkgResultCall__Inputs(this);
  }

  get outputs(): SubmitDkgResultCall__Outputs {
    return new SubmitDkgResultCall__Outputs(this);
  }
}

export class SubmitDkgResultCall__Inputs {
  _call: SubmitDkgResultCall;

  constructor(call: SubmitDkgResultCall) {
    this._call = call;
  }

  get submitterMemberIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get groupPubKey(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get misbehaved(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get signatures(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get signingMembersIndexes(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }
}

export class SubmitDkgResultCall__Outputs {
  _call: SubmitDkgResultCall;

  constructor(call: SubmitDkgResultCall) {
    this._call = call;
  }
}

export class SubmitTicketCall extends ethereum.Call {
  get inputs(): SubmitTicketCall__Inputs {
    return new SubmitTicketCall__Inputs(this);
  }

  get outputs(): SubmitTicketCall__Outputs {
    return new SubmitTicketCall__Outputs(this);
  }
}

export class SubmitTicketCall__Inputs {
  _call: SubmitTicketCall;

  constructor(call: SubmitTicketCall) {
    this._call = call;
  }

  get ticket(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SubmitTicketCall__Outputs {
  _call: SubmitTicketCall;

  constructor(call: SubmitTicketCall) {
    this._call = call;
  }
}

export class WithdrawGroupMemberRewardsCall extends ethereum.Call {
  get inputs(): WithdrawGroupMemberRewardsCall__Inputs {
    return new WithdrawGroupMemberRewardsCall__Inputs(this);
  }

  get outputs(): WithdrawGroupMemberRewardsCall__Outputs {
    return new WithdrawGroupMemberRewardsCall__Outputs(this);
  }
}

export class WithdrawGroupMemberRewardsCall__Inputs {
  _call: WithdrawGroupMemberRewardsCall;

  constructor(call: WithdrawGroupMemberRewardsCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get groupIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawGroupMemberRewardsCall__Outputs {
  _call: WithdrawGroupMemberRewardsCall;

  constructor(call: WithdrawGroupMemberRewardsCall) {
    this._call = call;
  }
}
